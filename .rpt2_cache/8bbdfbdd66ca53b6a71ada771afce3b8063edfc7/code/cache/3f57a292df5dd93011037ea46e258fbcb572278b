{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport { css } from 'glamor';\r\nimport { Portal } from 'react-portal';\r\nimport { Fragments, createDebugger } from '../../util';\r\nimport { VelocityComponent } from 'velocity-react';\r\nimport { ModalLightBox } from './ModalLightBox';\r\nvar debug = createDebugger('JoyKit:Modal');\r\n//======================\r\n// Styling\r\n//======================\r\nvar wrapperRules = function (isActive, hideLightbox) {\r\n    return css({\r\n        overflow: 'auto',\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        pointerEvents: !isActive && hideLightbox && 'none'\r\n    });\r\n};\r\n/**\r\n * A modal displays content that temporarily blocks interactions with the main view\r\n */\r\nvar ModalPortal = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ModalPortal, _super);\r\n    function ModalPortal() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = { isClosing: false };\r\n        _this.closePortal = function () {\r\n            debug('closePortal()');\r\n            _this.setState({ isClosing: true });\r\n        };\r\n        _this.buildModalContent = function () {\r\n            var isClosing = _this.state.isClosing;\r\n            var _a = _this.props, animations = _a.animations, delay = _a.delay, isActive = _a.isActive, runOnMount = _a.runOnMount, styleRules = _a.styleRules, type = _a.type, render = _a.render;\r\n            var animation = null;\r\n            if (animations) {\r\n                animation = animations(!isClosing && isActive);\r\n                debug(animation);\r\n            }\r\n            return (React.createElement(VelocityComponent, { animation: animation, duration: 300, delay: delay && delay, runOnMount: runOnMount, easing: \"ease\" },\r\n                React.createElement(\"div\", tslib_1.__assign({ className: type }, styleRules), render ? _this.inlineRender() : _this.props.children)));\r\n        };\r\n        return _this;\r\n    }\r\n    ModalPortal.prototype.componentDidMount = function () {\r\n        debug('Mount()');\r\n        if (this.props.isOpen) {\r\n            // Set overflow hidden so that the background doesn't scroll\r\n            document.body.style.overflow = 'hidden';\r\n        }\r\n    };\r\n    ModalPortal.prototype.componentWillReceiveProps = function (nextProps) {\r\n        var bodyOverflow = document.body.style.overflow;\r\n        if (this.props.isOpen && bodyOverflow !== 'hidden') {\r\n            document.body.style.overflow = 'hidden';\r\n        }\r\n    };\r\n    ModalPortal.prototype.componentWillUnmount = function () {\r\n        debug('Unmount()');\r\n        var onUnmount = this.props.onUnmount;\r\n        onUnmount && onUnmount(this.props);\r\n    };\r\n    ModalPortal.prototype.componentDidUpdate = function (prevProps, prevState) {\r\n        var _this = this;\r\n        if (this.state.isClosing && !Boolean(this.closingTimeoutId)) {\r\n            debug('Is closing', this.state);\r\n            this.closingTimeoutId = window.setTimeout(function () {\r\n                // Set overflow hidden so that the background doesn't scroll\r\n                document.body.style.overflow = 'auto';\r\n                _this.props.onClose();\r\n                window.clearTimeout(_this.closingTimeoutId);\r\n                _this.closingTimeoutId = null;\r\n                if (_this.props.resetAfterClosing) {\r\n                    _this.setState({ isClosing: false });\r\n                }\r\n            }, 300);\r\n        }\r\n    };\r\n    ModalPortal.prototype.inlineRender = function () {\r\n        var passedProps = { closePortal: this.closePortal };\r\n        return this.props.render(passedProps);\r\n    };\r\n    ModalPortal.prototype.render = function () {\r\n        var isClosing = this.state.isClosing;\r\n        var _a = this.props, children = _a.children, closeOnBackgroundClick = _a.closeOnBackgroundClick, closeOnEscape = _a.closeOnEscape, onClose = _a.onClose, hideLightboxOnInactive = _a.hideLightboxOnInactive, hideLightbox = _a.hideLightbox, ignoreCloseEvents = _a.ignoreCloseEvents, isActive = _a.isActive, isOpen = _a.isOpen, type = _a.type;\r\n        var modalContent = this.buildModalContent();\r\n        var portal = (React.createElement(Portal, null,\r\n            React.createElement(Fragments, null,\r\n                React.createElement(ModalLightBox, { closeOnBackgroundClick: closeOnBackgroundClick, closeOnEscape: closeOnEscape, handleCloseEvent: this.closePortal, hide: hideLightbox, ignoreCloseEvents: ignoreCloseEvents, isActive: isActive || (!isActive && !hideLightboxOnInactive), isOpen: isOpen && !isClosing }),\r\n                React.createElement(\"div\", tslib_1.__assign({ className: type + \"-wrapper\" }, wrapperRules(isActive, hideLightbox)), type === 'modal' && modalContent),\r\n                type === 'panel-overlay' && modalContent)));\r\n        return isOpen ? portal : null;\r\n    };\r\n    ModalPortal.defaultProps = {\r\n        closeOnEscape: true,\r\n        closeOnBackgroundClick: true,\r\n        hideLightboxOnInactive: true,\r\n        hideLightbox: false,\r\n        resetAfterClosing: false,\r\n        runOnMount: true\r\n    };\r\n    return ModalPortal;\r\n}(React.Component));\r\nexport { ModalPortal };\r\n//# sourceMappingURL=ModalPortal.js.map","map":{"version":3,"file":"ModalPortal.js","sourceRoot":"","sources":["ModalPortal.tsx"],"names":[],"mappings":"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"},"dts":{"name":"/Users/michaelcorrigan/Code/joy_kit/src/components/modal/ModalPortal.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from 'react';\r\nimport { StyleAttribute } from 'glamor';\r\nexport interface RenderProps {\r\n    closePortal: () => any;\r\n}\r\nexport interface BaseProps {\r\n    /** Primary content. */\r\n    children?: React.ReactNode;\r\n    /** Whether or not the Modal should close when the escape key is pressed. */\r\n    closeOnEscape?: boolean;\r\n    /** Whether or not the Modal should close when the background is clicked. */\r\n    closeOnBackgroundClick?: boolean;\r\n    /** Whether or not to hide the lightbox if the modal is not active */\r\n    hideLightboxOnInactive?: boolean;\r\n    /** Whether or not to hide the lightbox altogether */\r\n    hideLightbox?: boolean;\r\n    /**\r\n     * Whether or not to ignore close events when they occur - as opposed to adding/removing\r\n     * event listeners.\r\n     */\r\n    ignoreCloseEvents?: boolean;\r\n    /** Whether or not the accompanying modal is the most recently active */\r\n    isActive: boolean;\r\n    /** Whether or not the accompanying modal is open */\r\n    isOpen: boolean;\r\n    /**\r\n     * Called when a close event happens AND right after the closing animation.\r\n     * IE user presses escape (if enabled), clicks on the background (if enabled), or\r\n     * triggers a close event (as defined by the developer).\r\n     * @param {SyntheticEvent} e\r\n     */\r\n    onClose: ([any]?) => any;\r\n    /**\r\n     * Called when the modal will be removed from the DOM.\r\n     * @param {object} data - All Props\r\n     */\r\n    onUnmount?: (data) => any;\r\n    /**\r\n     * Allows for inline rendering and wrapping without having to create a new component.\r\n     * The props parameter receives a `closePortal` prop that should be invoked at the end of\r\n     * an interaction in order to complete the animation flow.\r\n     */\r\n    render?: (props: RenderProps) => any;\r\n    /**\r\n     * In the event where there could be many panels, we don't want to immediately remove it from the DOM.\r\n     *  We reset the close state post closing animation so that it can be re-opened\r\n     */\r\n    resetAfterClosing?: boolean;\r\n    runOnMount?: boolean;\r\n}\r\nexport interface Props extends BaseProps {\r\n    type: Type;\r\n    styleRules: StyleAttribute;\r\n    delay?: number;\r\n    animations: (isOpen: boolean) => any;\r\n}\r\nexport interface State {\r\n    isClosing: boolean;\r\n}\r\nexport declare type Type = 'modal' | 'panel-overlay';\r\n/**\r\n * A modal displays content that temporarily blocks interactions with the main view\r\n */\r\nexport declare class ModalPortal extends React.Component<Props, State> {\r\n    private closingTimeoutId;\r\n    static defaultProps: {\r\n        closeOnEscape: boolean;\r\n        closeOnBackgroundClick: boolean;\r\n        hideLightboxOnInactive: boolean;\r\n        hideLightbox: boolean;\r\n        resetAfterClosing: boolean;\r\n        runOnMount: boolean;\r\n    };\r\n    state: State;\r\n    componentDidMount(): void;\r\n    componentWillReceiveProps(nextProps: any): void;\r\n    componentWillUnmount(): void;\r\n    componentDidUpdate(prevProps: any, prevState: any): void;\r\n    protected closePortal: () => void;\r\n    private buildModalContent;\r\n    private inlineRender();\r\n    render(): JSX.Element;\r\n}\r\n"}}
