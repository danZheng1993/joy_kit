{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport { css } from 'glamor';\r\nimport { VelocityComponent } from 'velocity-react';\r\nvar ESCAPE_KEY_CODE = 27;\r\n//======================\r\n// Styling\r\n//======================\r\n/* CSS */\r\nvar overlayRules = function (animationOverrideRules, styleRules) {\r\n    return css({\r\n        backgroundColor: 'rgba(0, 0, 0, .8)',\r\n        bottom: 0,\r\n        left: 0,\r\n        position: 'fixed',\r\n        top: 0,\r\n        right: 0,\r\n        opacity: 0\r\n    }, styleRules);\r\n};\r\n/**\r\n * The overlay will act as dimmer of the screen and it will contain a modal\r\n */\r\nvar ModalLightBox = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ModalLightBox, _super);\r\n    function ModalLightBox() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.handleEscapeKeyClick = function (e) {\r\n            if (e.which === ESCAPE_KEY_CODE) {\r\n                _this.closeModal(e);\r\n            }\r\n        };\r\n        _this.handleBackgroundClick = function (e) {\r\n            if (e.target === e.currentTarget ||\r\n                (e.target.classList[0] && e.target.classList[0].endsWith('wrapper'))) {\r\n                _this.closeModal(e);\r\n            }\r\n        };\r\n        _this.closeModal = function (e) {\r\n            if (!_this.props.ignoreCloseEvents && _this.props.isActive) {\r\n                _this.props.handleCloseEvent(_this.props, e);\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    ModalLightBox.prototype.componentWillMount = function () {\r\n        if (this.props.closeOnEscape) {\r\n            document.addEventListener('keyup', this.handleEscapeKeyClick, false);\r\n        }\r\n        if (this.props.closeOnBackgroundClick) {\r\n            document.addEventListener('click', this.handleBackgroundClick, false);\r\n        }\r\n    };\r\n    ModalLightBox.prototype.componentWillUnmount = function () {\r\n        if (this.props.closeOnEscape) {\r\n            document.removeEventListener('keyup', this.handleEscapeKeyClick, false);\r\n        }\r\n        if (this.props.closeOnBackgroundClick) {\r\n            document.removeEventListener('click', this.handleBackgroundClick, false);\r\n        }\r\n    };\r\n    ModalLightBox.prototype.render = function () {\r\n        if (this.props.hide) {\r\n            return null;\r\n        }\r\n        var _a = this.props, animationOverrideRules = _a.animationOverrideRules, closeOnBackgroundClick = _a.closeOnBackgroundClick, isOpen = _a.isOpen, styleRules = _a.styleRules;\r\n        return (React.createElement(VelocityComponent, { animation: { opacity: isOpen ? 1 : 0 }, duration: 300, runOnMount: true },\r\n            React.createElement(\"div\", tslib_1.__assign({}, overlayRules(animationOverrideRules, styleRules), { className: \"modal-lightbox\" }))));\r\n    };\r\n    ModalLightBox.defaultProps = {\r\n        hide: false,\r\n        ignoreCloseEvents: false\r\n    };\r\n    return ModalLightBox;\r\n}(React.Component));\r\nexport { ModalLightBox };\r\n//# sourceMappingURL=ModalLightBox.js.map","map":{"version":3,"file":"ModalLightBox.js","sourceRoot":"","sources":["ModalLightBox.tsx"],"names":[],"mappings":"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"},"dts":{"name":"/Users/michaelcorrigan/Code/joy_kit/src/components/modal/ModalLightBox.d.ts","text":"/// <reference types=\"react\" />\r\nimport * as React from 'react';\r\nimport { StyleAttribute } from 'glamor';\r\nexport interface Props {\r\n    /** Whether or not the Modal should close when the escape key is pressed */\r\n    closeOnEscape: boolean;\r\n    /** Whether or not the Modal should close when the background is clicked */\r\n    closeOnBackgroundClick: boolean;\r\n    ignoreCloseEvents?: boolean;\r\n    /** How to handle the accepted close events */\r\n    handleCloseEvent: (props: object, e: any) => any;\r\n    hide?: boolean;\r\n    /** Whether or not the modal is the most recently active modal */\r\n    isActive: boolean;\r\n    /** Whether or not the modal is rendered on the screen */\r\n    isOpen: boolean;\r\n    /** isOpen/close animation overrides */\r\n    animationOverrideRules?: Styles;\r\n    /** Additional/override styles */\r\n    styleRules?: Styles;\r\n}\r\nexport declare type Styles = StyleAttribute | {};\r\n/**\r\n * The overlay will act as dimmer of the screen and it will contain a modal\r\n */\r\nexport declare class ModalLightBox extends React.Component<Props, {}> {\r\n    static defaultProps: {\r\n        hide: boolean;\r\n        ignoreCloseEvents: boolean;\r\n    };\r\n    componentWillMount(): void;\r\n    componentWillUnmount(): void;\r\n    private handleEscapeKeyClick;\r\n    private handleBackgroundClick;\r\n    private closeModal;\r\n    render(): JSX.Element;\r\n}\r\n"}}
