{"code":"/**\r\n * Tests if children are nil in React.\r\n * @param {Object} children The children prop of a component.\r\n * @returns {Boolean}\r\n */\r\nexport var isNil = function (children) {\r\n    return children === null ||\r\n        children === undefined ||\r\n        (Array.isArray(children) && children.length === 0);\r\n};\r\n/**\r\n * utilsity function that simply returns all its children - without the need for\r\n * array notation and manually adding keys to each of the elements.\r\n *\r\n * As a feature of React Fiber, we can return an array of elements that don't need to have a\r\n * parent container (IE a div) in order to nest.\r\n * @param props\r\n * @example\r\n * const Component = () => (\r\n *   <Aux>\r\n *    <li>1</li>\r\n *    <li>2</li>\r\n *    <li>3</li>\r\n *  </Aux>\r\n * )\r\n *\r\n * Further Reading:\r\n * https://reactjs.org/blog/2017/09/26/react-v16.0.html\r\n *\r\n * Why have this utilsity:\r\n * https://pawelgrzybek.com/return-multiple-elements-from-a-component-with-react-16/\r\n *\r\n * If you attempt to directly return an array of React Elements,\r\n * you will receive several errors TS errors:\r\n *\r\n * 1. error TS2605: JSX element type 'Element[]' is not a constructor\r\n *    function for JSX elements.  Property 'render' is missing in type Element[]\r\n * 2. error TS2607: JSX element class does not support attributes because it\r\n *    does not have a 'props' property.\r\n *\r\n */\r\nexport var Fragments = function (props) { return props.children; };\r\n//# sourceMappingURL=childrenUtils.js.map","map":{"version":3,"file":"childrenUtils.js","sourceRoot":"","sources":["childrenUtils.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,CAAC,IAAM,KAAK,GAAG,UAAC,QAAuB;IAC3C,OAAA,QAAQ,KAAK,IAAI;QACjB,QAAQ,KAAK,SAAS;QACtB,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;AAFlD,CAEkD,CAAC;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,CAAC,IAAM,SAAS,GAAG,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,EAAd,CAAc,CAAC"},"dts":{"name":"/Users/michaelcorrigan/Code/joy_kit/src/util/childrenUtils.d.ts","text":"/// <reference types=\"react\" />\r\nimport { ReactChildren } from 'react';\r\n/**\r\n * Tests if children are nil in React.\r\n * @param {Object} children The children prop of a component.\r\n * @returns {Boolean}\r\n */\r\nexport declare const isNil: (children: ReactChildren) => boolean;\r\n/**\r\n * utilsity function that simply returns all its children - without the need for\r\n * array notation and manually adding keys to each of the elements.\r\n *\r\n * As a feature of React Fiber, we can return an array of elements that don't need to have a\r\n * parent container (IE a div) in order to nest.\r\n * @param props\r\n * @example\r\n * const Component = () => (\r\n *   <Aux>\r\n *    <li>1</li>\r\n *    <li>2</li>\r\n *    <li>3</li>\r\n *  </Aux>\r\n * )\r\n *\r\n * Further Reading:\r\n * https://reactjs.org/blog/2017/09/26/react-v16.0.html\r\n *\r\n * Why have this utilsity:\r\n * https://pawelgrzybek.com/return-multiple-elements-from-a-component-with-react-16/\r\n *\r\n * If you attempt to directly return an array of React Elements,\r\n * you will receive several errors TS errors:\r\n *\r\n * 1. error TS2605: JSX element type 'Element[]' is not a constructor\r\n *    function for JSX elements.  Property 'render' is missing in type Element[]\r\n * 2. error TS2607: JSX element class does not support attributes because it\r\n *    does not have a 'props' property.\r\n *\r\n */\r\nexport declare const Fragments: (props: any) => any;\r\n"}}
